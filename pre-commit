#!/bin/bash

lod_message() {
  cat <<EOS

                 OMM                                              MM$
                 MMMM                                             MMMM
                   MMM                                              MMO
                   =MM                                              MMM
                   MMM                                              MMD
MMMMMMMMMMMMMMMMMMMMM                           NMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMM                            NMMMMMMMMMMMMMMMMMMM,
   MMMM?      ?MMMM                                =MMMM       MMMMD
 =MMM           ?MMM                              MMMM           MMMN
:MMM              MMM                            NMM=             =MMD
MMM               ,MMO                           MMM               DMM
MMM      MMMD      MMM                          DMM?     ,MMM,      MMD
MMM      MMM$      MMM                          NMM?      MMM       MMN
MMM                MMM                          OMMM               =MMO
MMMN              NMM$                           MMM               MMM
 MMM?            MMMM                            DMMM             MMM$
  MMMM:        :MMMM                              DMMMM         MMMM$
   =MMMMMMMMMMMMMM?                                 MMMMMMMMMMMMMMM
     MMMMMMMMMMM                                      MMMMMMMMMMM




                       DMMMMMMMMMMMMMMMMMMMMMMM

EOS
}

lod_exit() {
  lod_message
  echo $1
  exit 1
}

#
# Platform-specific features
#
git_root=`git rev-parse --show-toplevel`
source "$git_root/.git/hooks/env_vars.sh"

if [[ "$my_platform" == "linux" ]]; then
  whitespace_modification="true"
  email_hostname_verify="true"
  stat_flag=-c
elif [[ "$my_platform" == "darwin" ]]; then
  whitespace_modification="true"
  email_hostname_verify="true"
  stat_flag=-f
else
  echo "Non-linux, non-darwin platform detected ($my_platform) so whitespace modification logic suppressed..."
  whitespace_modification=""
  email_hostname_verify=""
  stat_flag=-f
fi

#
# Required Project Files
# e.g. "Gemfile Gemfile.lock Procfile README Rakefile .gitignore config.ru rack_helpers.rb"
#

REQUIRED_FILES=""
if test -e "$git_root/REQUIRED_FILES"; then
  REQUIRED_FILES=`cat $git_root/REQUIRED_FILES`
fi

#
# Whitespace and syntax checks
#

whitespace=""
todos=""
echo "Checking for syntax errors..."
commited_files=`git diff-index --name-only HEAD -- 2>&1`
exit_status=$?
if [[ "exit_status" -ne 0 && "$commited_files" == "fatal: bad revision 'HEAD'" ]]; then
  commited_files=`find "$git_root" -type f | grep -v ".git/"`
fi
for FILE in $commited_files; do
  if test -f "$FILE"; then
    filetype=`file -b $FILE`
    if [[ -n "$whitespace_modification" ]]; then
      if [[ "$filetype" =~ "text" ]]; then
        if [[ "$my_platform" == "linux" ]]; then
          if [[ -n `grep "\\s\\s*$" $FILE` ]]; then whitespace="$whitespace $FILE"; fi

          # Remove trailing whitespace
          sed -i "s/\\s\\s*$//g" $FILE

          # Remove tabs
          if [[ ! "$filetype" =~ "makefile" ]]; then
            if [[ "${FILE##*.}" == "py" ]]; then
              sed -i "s/\t/    /g" $FILE
            else
              sed -i "s/\t/  /g" $FILE
            fi
          fi

          # Remove empty line at EOF
          sed -i '${/^ *$/d;}' $FILE
        elif [[ "$my_platform" == "darwin" ]]; then
          if [[ -n `egrep '[[:space:]]+$' $FILE` ]]; then whitespace="$whitespace $FILE"; fi

          # Remove trailing whitespace
          sed -i '' -E 's/[[:space:]]+$//g' $FILE

          # Remove tabs
          if [[ ! "$filetype" =~ "makefile" ]]; then
            if [[ "${FILE##*.}" == "py" ]]; then
              sed -i '' -E $'s/\t/    /g' $FILE
            else
              sed -i '' -E $'s/\t/  /g' $FILE
            fi
          fi

          # Remove empty line at EOF
          sed -i '' -E '${/^ *$/d;}' $FILE
        fi
      fi
    fi

    # Capture important-looking TODOs
    temp_todos=`grep -n -C3 "TODO" $FILE | grep -C3 "XXX\|FIXME"`
    [[ -n "$temp_todos" ]] && todos="$todos\n\n$temp_todos"

    # If a file is a bash script, check for syntax errors using bash
    if [[ "$FILE" =~ .*\.sh$ || "$filetype" =~ "shell script" ]]; then
      if [[ "$fail" -eq 0 || -z "$fail" ]]; then
        bash -n "$FILE" 1> /dev/null; fail=$?
        if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
      else
        bash -n "$FILE" 1> /dev/null
        if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
      fi
    fi

    # If a file is ruby, check for syntax errors using ruby
    if [[ "$FILE" =~ .*\.rb$ ]]; then
      if [[ -n `which ruby 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          ruby -c "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          ruby -c "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: Ruby file found, but syntax cannot be checked without 'ruby' binary"
      fi
    fi

    # If a file is python, check for syntax errors using python or pypy
    if [[ "$FILE" =~ .*\.py$ ]]; then
      if [[ -n `which python 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          python -m py_compile "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          python -m py_compile "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      elif [[ -n `which pypy 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          pypy -m py_compile "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          pypy -m py_compile "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: Python file found, but syntax cannot be checked without 'python' or 'pypy' binary"
      fi
    fi

    # If a file is javascript, check for syntax errors using js or uglifyjs
    if [[ "$FILE" =~ .*\.js$ ]]; then
      if [[ -n `which js 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          js -C "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          js -C "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      elif [[ -n `which uglifyjs 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          uglifyjs "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          uglifyjs "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: Javascript file found, but syntax cannot be checked without 'js' or 'uglifyjs' binary"
      fi
    fi

    # If a file is css, check for syntax errors using lessc
    if [[ "$FILE" =~ .*\.css$ ]]; then
      if [[ -n `which lessc 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          lessc "$FILE" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          lessc "$FILE" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: CSS file found, but syntax cannot be checked without 'less' npm package"
      fi
    fi

    # If a file is json, check for syntax errors
    if [[ "$FILE" =~ .*\.json$ ]]; then
      if [[ -n `gem list | grep "json" 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          ruby -rrubygems -rjson -e "JSON.parse(IO.read('$FILE'))" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          ruby -rrubygems -rjson -e "JSON.parse(IO.read('$FILE'))" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: JSON file found, but syntax cannot be checked without 'json' rubygem"
      fi
    fi

    # If a file is yaml, check for syntax errors
    if [[ "$FILE" =~ .*\.yaml$ ]]; then
      if [[ -n `which ruby 2> /dev/null` ]]; then
        if [[ "$fail" -eq 0 || -z "$fail" ]]; then
          ruby -ryaml -e "begin; YAML::load(IO.read('$FILE')); rescue Exception => e; raise if e.is_a?(SyntaxError); end" 1> /dev/null; fail=$?
          if [[ "$fail" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        else
          ruby -ryaml -e "begin; YAML::load(IO.read('$FILE')); rescue Exception => e; raise if e.is_a?(SyntaxError); end" 1> /dev/null
          if [[ "$?" -ne 0 ]]; then echo "Syntax Error found in '$FILE'"; fi
        fi
      else
        echo "WARNING: YAML file found, but syntax cannot be checked without 'ruby' binary"
      fi
    fi
  fi
done
echo "Syntax check complete."

#
# Built-in git checks
#
git diff-index --check HEAD -- 2> /dev/null

#
# Check for Syntax Errors
#
[[ "$fail" -ne 0 && -n "$fail" ]] && lod_exit "Syntax Errors Found. Aborting commit"

#
# Check for warnings
#
fail=0
for FILE in $commited_files ; do
  if test -e $FILE; then
    # If a file is ruby, check for syntax errors
    if [[ -n `find $FILE -regex ".*\.rb$"` ]]; then
      warnings=`ruby -c "$FILE" 2>&1 | grep -i warn`
      if [[ -n "$warnings" ]]; then fail=1; fi
    fi
  fi
done

[[ "$fail" -ne 0 && -n "$fail" ]] && lod_exit "Syntax Warnings Found. Aborting commit"

#
# Was whitespace modified?
#
if [[ -n "$whitespace_modification" ]]; then
  [[ -n "$whitespace" ]] && lod_message
  for FILE in $whitespace; do
    echo "Whitespace problem fixed. Please re-add '$FILE' to your commit"
  done
  [[ -n "$whitespace" ]] && exit 1
fi

#
# Check that project metadata files exist
#
for FILE in $REQUIRED_FILES; do
  test ! -e $FILE && lod_exit "$FILE not present. Aborting commit"
done

#
# Check that if Gemfile exists, Gemfile.lock exists and is up to date
#
if [[ "$REQUIRED_FILES" =~ "Gemfile" ]]; then
  # Bundler
  old_mod_time="0"
  if [[ -e "Gemfile.lock" ]]; then
    old_mod_time=`stat $stat_flag %Z Gemfile.lock`
  fi

  echo -n Bundling Gemfile...
  bundle install &> /dev/null
  echo Bundle Complete.

  [[ ! -e "Gemfile.lock" ]] && lod_exit "Gemfile.lock not present. Aborting commit"
  [[ `stat $stat_flag %Z Gemfile.lock` -ne $old_mod_time ]] && lod_exit "Gemfile.lock updated. Please re-add 'Gemfile.lock' to your commit"
fi

#
# Check that if any .min.js files exist in the project, that their modification time is later than their .js original
#
# TODO

#
# If there are any tests available, ensure that they run
#
test_pass=0
if [[ -e "$git_root/Gruntfile.js" || -e "$git_root/Gruntfile.coffee" ]]; then
  if [[ -n `which grunt 2> /dev/null` ]]; then
    echo "Running Grunt tests..."
    cd "$git_root"
    grunt test; test_pass=$?
    cd -
  else
    echo "Gruntfile found but 'grunt' command isn't available"
  fi
elif [[ -e "$git_root/Rakefile" ]]; then
  if [[ -n `which rake 2> /dev/null` ]]; then
    echo "Running RSpec tests..."
    cd "$git_root"
    rake spec; test_pass=$?
    cd -
  else
    echo "Rakefile found but 'rake' command isn't available"
  fi
elif [[ -e "$git_root/setup.py" ]]; then
  if [[ -n `which python 2> /dev/null` ]]; then
    echo "Running Python tests..."
    cd "$git_root"
    python setup.py test; test_pass=$?
    cd -
  else
    echo "setup.py found but 'python' isn't available"
  fi
elif [[ -e "$git_root/package.json" ]]; then
  if [[ -n `which npm 2> /dev/null` ]]; then
    echo "Running Node tests..."
    cd "$git_root"
    npm test; test_pass=$?
    cd -
  else
    echo "package.json found but 'npm' isn't available"
  fi
fi
if [[ "$test_pass" -ne 0 ]]; then
  lod_exit "Tests failed, please ensure tests pass before committing."
fi

#
# Check that username and user emails are filled properly
#
username=`git config --get user.name`
useremail=`git config --get user.email`
emaildomain=`echo $useremail | grep -o "[^@]*$"`

if [[ -n "$email_hostname_verify" ]]; then
  ip_list=`ifconfig | grep -o "inet \(addr:\)\?[0-9\.]*" | grep -o "[0-9\.]*$" | grep -v "127.0.0.1"`
fi

if [[ "$username" == "" ]]; then
  lod_exit "Please set your git user.name by running 'git config user.name <your github username>'"
elif [[ "$useremail" == "" ]]; then
  lod_exit "Please set your git user.email by running 'git config user.email <your github email>'"
elif [[ -n "$email_hostname_verify" ]] && [[ -n "$ip_list" ]] && ! host "$emaildomain" &> /dev/null; then
  lod_exit "'$emaildomain' is not a valid hostname. Please set your git user.email by running 'git config user.email <your github email>'"
fi

#
# Ask user to review "TO-DO"s that also are marked with triple X or "FIX-ME"
# TODO
#if [[ -n "$todos" ]]; then
#  echo -n "Do you accept these important-looking TODOs? [y/n]: "
#  read -a acceptance kbd
#  [[ "$acceptance" == "y" ]] || lod_exit "Please fix some of those TODOs."
#fi

exit 0
